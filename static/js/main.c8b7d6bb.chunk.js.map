{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","target","name","value","e","preventDefault","updateTodos","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","uuidv4","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8b7d6bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isEditing: false, task: this.props.task };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value,\r\n    });\r\n  }\r\n\r\n  handleUpdate(e) {\r\n    e.preventDefault();\r\n    this.props.updateTodos(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n\r\n  handleToggle(e) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <form onSubmit={this.handleUpdate} className=\"Todo-edit-form\">\r\n            <input type=\"text\" value={this.state.task} name=\"task\" onChange={this.handleChange} />\r\n            <button>Save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <li className={this.props.completed ? 'Todo-task Completed' : 'Todo-task'} onClick={this.handleToggle}>{this.props.task}</li>\r\n          <div className=\"Todo-buttons\">\r\n            <button onClick={this.toggleForm}><i className=\"fas fa-pen\"></i></button>\r\n            <button onClick={this.handleRemove}><i className=\"fas fa-trash\"></i></button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from 'react';\r\nimport './NewTodoForm.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: '' };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\r\n    this.setState({ task: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"NewTodoForm\">\r\n        <label htmlFor=\"task\">New Todo</label>\r\n        <input type=\"text\" placeholder=\"New Todo\" name=\"task\" id=\"task\" value={this.state.task} onChange={this.handleChange} />\r\n        <button>Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { todos: [] };\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n\r\n  create(newTodo) {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo],\r\n    });\r\n  }\r\n\r\n  remove(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter((t) => t.id !== id),\r\n    });\r\n  }\r\n\r\n  update(id, updatedTask) {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todos.map((todo) => {\r\n      return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} updateTodos={this.update} completed={todo.completed} toggleTodo={this.toggleCompletion} />;\r\n    });\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>Todo List! <span>A Simple React Todo List App.</span></h1>\r\n        <ul>{todos}</ul>\r\n        <NewTodoForm createTodo={this.create} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}